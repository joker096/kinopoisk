import streamlit as st
import json
from streamlit_option_menu import option_menu
import datetime
import os

import base64
from pathlib import Path

class MovieApp:
    def __init__(self):
        self.page_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
    @st.experimental_fragment
    def load_movies_from_json(self, file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            movies_data = json.load(file)
        return movies_data

    @st.experimental_fragment
    def filter_movies(self, movies, year=None, genre=None, title=None):
        if year:
            movies = [movie for movie in movies if movie.get('year') == year]
        if genre:
            movies = [movie for movie in movies if genre in movie.get('genres', '').split(', ')]
        if title:
            movies = [movie for movie in movies if title.lower() in movie.get('name', '').lower()]
        return movies

    @st.experimental_fragment
    def show_movies(self, movies_data):
        PLAYER_LINK = 'https://kinopoisk-watch-dsze5.ondigitalocean.app/player/'

        if movies_data:
            for i in range(0, len(movies_data), 6):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ 6 —Ñ–∏–ª—å–º–æ–≤ –∑–∞ —Ä–∞–∑
                cols = st.columns(6)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–µ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                for col, movie in zip(cols, movies_data[i:i+6]):
                    try:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        current_dir = os.getcwd()
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        images_dir = os.path.join(current_dir, "images")
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                        # image_path = os.path.join(images_dir, f"{movie['id']}.jpg")
                        
                        # poster_image = movie['poster_url']
                        video_link = f"{PLAYER_LINK}?id={movie['id']}"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        with col:                            
                            image_path = Path(__file__).with_name("images").joinpath(f"{movie['id']}.jpg").relative_to(Path.cwd())
                            # st.write(image_path)
                            # st.image(str(image_path))
                            # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
                            with open(image_path, "rb") as f:
                                image_bytes = f.read()

                            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
                            image_base64 = base64.b64encode(image_bytes).decode()

                            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-–∫–æ–¥–∞ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            html_code = f"<a href='{video_link}' id='{movie['id']}'><img src='data:image/jpeg;base64,{image_base64}' width='100%'></a>"

                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é st.markdown
                            st.markdown(html_code, unsafe_allow_html=True)


                            # st.image(poster_image, use_column_width='auto', output_format='JPEG', clamp=True)
                            # st.markdown(f"<a href='{video_link}' id='Movie_{i}'><img src='{str(image_path)}' width='100%'></a>", unsafe_allow_html=True)
                            st.caption(
                                f"###### {movie['name']}",
                                help=(
                                    movie['description'] + '\n\n' +
                                    str(f'–ì–æ–¥: {movie["year"]}') + ' / ' +
                                    str(f'–†–µ–π—Ç–∏–Ω–≥: {movie["rating"]}') + ' / ' +
                                    str(f'–°—Ç—Ä–∞–Ω–∞: {movie["country"]}') + ' / ' +
                                    str(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie["duration"]}') + ' –º–∏–Ω. / ' +
                                    str(f'–ë—é–¥–∂–µ—Ç: {movie["budget"]}') + '\n\n' +
                                    movie['genres'] + '\n\n' +
                                    str(f'–ê–∫—Ç—ë—Ä—ã: {movie["actors"]}') + '\n\n' +
                                    str(f'–†–µ–∂–∏—Å—Å—ë—Ä: {movie["directors"]}')
                                ),
                                unsafe_allow_html=True
                            )

                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

    def run(self):
        st.set_page_config(layout="wide", page_title="–§–∏–ª—å–º—ã Kinopoisk", page_icon="üé•")  

        with st.sidebar:
            selected = option_menu(None, ["–§–∏–ª—å–º—ã", '–°–µ—Ä–∏–∞–ª—ã', '–ú—É–ª—å—Ç–∏–∫–∏', '–ê–Ω–∏–º–µ'],
                                    icons=['bi bi-film', 'bi bi-tv', 'bi bi-gitlab', 'bi bi-fire'], menu_icon="bar-chart-fill", default_index=0, styles={
                    "container": {"padding": "5!important", "background-color":'black'},
                    "icon": {"color": "white", "font-size": "18px"},
                    "nav-link": {"color":"white", "font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "blue"},
                    "nav-link-selected": {"background-color": "#02ab21"},
                })
            
            # –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤
            current_year = datetime.datetime.now().year
            year = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥", [None] + list(reversed(range(1900, current_year + 1))))
            genre = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä", [None] + ["–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è", "–±–æ–µ–≤–∏–∫", "—Ç—Ä–∏–ª–ª–µ—Ä", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ñ—ç–Ω—Ç–µ–∑–∏", "—É–∂–∞—Å—ã", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º"])
            title = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            cols = st.columns(5)
            with cols[0]:
                if st.button("‚Üê"):
                    if self.page_index > 0:
                        self.page_index -= 1
            with cols[4]:
                if st.button("‚Üí"):
                    self.page_index += 1

            # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page_index + 1}")

        if selected == '–§–∏–ª—å–º—ã':
            movies_data = self.load_movies_from_json("movies.json")
        elif selected == '–°–µ—Ä–∏–∞–ª—ã':
            movies_data = self.load_movies_from_json("series.json")
        elif selected == '–ú—É–ª—å—Ç–∏–∫–∏':
            movies_data = self.load_movies_from_json("cartoons.json")
        elif selected == '–ê–Ω–∏–º–µ':
            movies_data = self.load_movies_from_json("anime.json")
        else:
            movies_data = self.load_movies_from_json("movies.json")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_movies = self.filter_movies(movies_data, year, genre, title)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        movies_per_page = 240
        start_index = self.page_index * movies_per_page
        end_index = start_index + movies_per_page
        movies_to_display = filtered_movies[start_index:end_index]

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤
        self.show_movies(movies_to_display)

if __name__ == "__main__":
    app = MovieApp()
    app.run()
